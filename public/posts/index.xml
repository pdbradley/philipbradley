<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Philip Bradley</title>
    <link>http://www.philipbradley.net/posts/</link>
    <description>Recent content in Posts on Philip Bradley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.philipbradley.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Ripgrep with Vim in CtrlP and Ack.vim</title>
      <link>http://www.philipbradley.net/posts/2017-03-29-ripgrep-with-ctrlp-and-vim/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2017-03-29-ripgrep-with-ctrlp-and-vim/</guid>
      <description>Sometimes to improve and broaden my mind I watch the Kardashians. (Who knew such sublime things would one day be televised?) Anyway last week when Kylie and Kendall nearly came to blows over which plain-text search utility was the fastest, I felt fortunate to have tuned inâ€”&amp;ldquo;What is ripgrep, and why is Kylie so excited about it,&amp;quot;, I wondered aloud.
Well it turns out that ripgrep is the next in a line of improvements to grep, the ole standby text search utility we grew up with.</description>
    </item>
    
    <item>
      <title>Installing QT5 on Travis-CI to use Capybara Webkit with React Components</title>
      <link>http://www.philipbradley.net/posts/2016-08-25-capybara-react-qt5-and-travis-ci/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2016-08-25-capybara-react-qt5-and-travis-ci/</guid>
      <description>Because this took me so long to figure out, I&#39;m posting it. On some capybara feature tests, my react components would not render (on Travis).
Eventually I figured out that this was because I was missing qt5 on Travis (Ubuntu 12.04)
Anyhow, after about 3 HOURS of tinkering, this is what works. The main thing to remember is you have to put dist: trusty in your config.
# put this in your .</description>
    </item>
    
    <item>
      <title>Extract Method Refactoring with a Luhn Algorithm (Firehose project)</title>
      <link>http://www.philipbradley.net/posts/2016-06-03-extract-method-with-luhn-algorithm/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2016-06-03-extract-method-with-luhn-algorithm/</guid>
      <description>I&#39;ve been mentoring at the The Firehose Project for a while and the other day I volunteered to give a short talk on refactoring using &amp;ldquo;extract method&amp;rdquo;. I&#39;m not sure if that is a proper noun or not.
Extract method is a great technique, especially for beginners, to reduce the mental clutter of your code.
  </description>
    </item>
    
    <item>
      <title>Using Capybara to Tee Up an Interactive Browser Session Quickly</title>
      <link>http://www.philipbradley.net/posts/2016-03-30-using-capybara-to-tee-up-your-browser-session/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2016-03-30-using-capybara-to-tee-up-your-browser-session/</guid>
      <description>Even though the stuff I make generally is test driven, there always comes a time when you need to click around your web app like a real person would.
In development, I often use a rake task to populate the database with sample data to get a sense of how things will look and feel with &amp;ldquo;real&amp;rdquo; data. But I really loathe needing to log in and navigate to various pages that I&#39;m inspecting.</description>
    </item>
    
    <item>
      <title>Good flashcards for Vim / Rails / Ruby / Git</title>
      <link>http://www.philipbradley.net/posts/2015-12-1-vim-and-rails-flashcards/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2015-12-1-vim-and-rails-flashcards/</guid>
      <description>These days you can so quickly navigate to online (or local, using Dash) resources to get your syntax right that it may seem silly to emphasize memorization.
But the difference between knowing that something can be done, versus knowing how to do it at that moment, can mean the difference between one hour of coding and three. (I just made those numbers up)
Especially when using something like Vim, where there are so many ways to do the same thing.</description>
    </item>
    
    <item>
      <title>Finding records with no associated records (where child association does not exist) via has_many :through in Rails 4</title>
      <link>http://www.philipbradley.net/posts/2015-11-01-finding-records-with-no-associated-records-or-child-records-via-has-many-through-in-rails-4/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/2015-11-01-finding-records-with-no-associated-records-or-child-records-via-has-many-through-in-rails-4/</guid>
      <description>Suppose you have the following Activerecord associations established:
Class Student has_many :class_sessions end Class ClassSession belongs_to :student end And you want to find out which students have no class sessions. Often I&#39;ve seen some interesting solutions like:
Student.all - Student.find(ClassSession.pluck(:student_id)) But this can get really bad if you ever have any reasonable amount of data to deal with. You can get what you want with a simple query:
Student.includes(:class_sessions).where(class_sessions: {id: nil}) When you use &amp;ldquo;includes&amp;rdquo; activerecord will use LEFT OUTER JOIN to include whatever associations you are asking for.</description>
    </item>
    
    <item>
      <title>Rspec Into Vim With Quickfix</title>
      <link>http://www.philipbradley.net/posts/rspec-into-vim-with-quickfix/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.philipbradley.net/posts/rspec-into-vim-with-quickfix/</guid>
      <description>If you, live and die by TDD you probably started spending a lot of time writing tests which drive most of the application code you write. Red, Green, Refactor, etc. My tool of choice is Rspec, although Minitest is also quite nice.
Maybe I just have lazy eyes, but I get tired of scanning the pane where my tests run to find the exact location of each test failure, then navigating to it.</description>
    </item>
    
  </channel>
</rss>